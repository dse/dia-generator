#!/usr/bin/env perl
use warnings;
use strict;
use v5.10.0;
use open qw(:locale);
use Data::Dumper;
use Carp::Always;
# use GenDia;

# filenames used for input must contain \.
my @tableNames = grep { !/\./ } @ARGV;
@ARGV = grep { m/\./ } @ARGV;

my $generator = Dia::Generator->new();
$generator->excludeFields([qw(created_by last_edited_by created_at updated_at)]);
$generator->parseMySQLDump();
while (<>) {
    $generator->parse($_);
}
print $generator->generateXML(@tableNames);

package Dia::Generator {
    use Data::Dumper;
    use Moo;
    INIT {
        has 'parser' => (is => 'rw');
        has 'tableNames'  => (is => 'rw', default => sub { return []; });
        has 'tableNameHash' => (is => 'rw', default => sub { return {}; });
        has 'tableFields' => (is => 'rw', default => sub { return {}; });
        has 'tableFieldHash' => (is => 'rw', default => sub { return {}; });
        has 'references' => (is => 'rw', default => sub { return []; });
        has 'referenceHash' => (is => 'rw', default => sub { return {}; });
        has 'currentTableName' => (is => 'rw');
        has 'currentFieldIndex' => (is => 'rw');
        has 'objectIdCounter' => (is => 'rw', default => 0);
        has 'tableObjectId'   => (is => 'rw', default => sub { return {}; });
        has 'excludeFields' => (is => 'rw', default => sub { return []; });
        has 'includeTableNames' => (is => 'rw', default => sub { return {}; });

        # positioning
        has 'left' => (is => 'rw');
        has 'top' => (is => 'rw');
        has 'x1' => (is => 'rw');
        has 'y1' => (is => 'rw');
        has 'x2' => (is => 'rw');
        has 'y2' => (is => 'rw');
        has 'x3' => (is => 'rw');
        has 'y3' => (is => 'rw');
        has 'width' => (is => 'rw');
        has 'height' => (is => 'rw');
        has 'xinc' => (is => 'rw');
        has 'yinc' => (is => 'rw');

        has 'rowNumber'    => (is => 'rw', default => 0);
        has 'columnNumber' => (is => 'rw', default => 0);
        has 'columnsPerRow' => (is => 'rw', default => 11);
    }
    sub parseMySQLDump {
        my ($self) = @_;
        my $parser = Dia::Parse::MySQLDump->new();
        $parser->generator($self);
        $self->parser($parser);
    }
    sub parse {
        my ($self, $line) = @_;
        $self->parser->parse($line);
    }
    sub eof {
        my ($self) = @_;
        $self->parser->eof();
        $self->parser(undef);
    }
    sub startTable {
        my ($self, $tableName) = @_;
        $self->currentTableName($tableName);
        if (!exists $self->tableFields->{$tableName}) {
            my $index = scalar @{$self->tableNames};
            my $fields = [];
            my $fieldHash = {};
            my $hash = {
                        index => $index,
                        fields => $fields,
                        fieldHash => $fieldHash,
                       };
            push(@{$self->tableNames}, $tableName);
            $self->tableNameHash->{$tableName} = $hash;
            $self->tableFields->{$tableName} = $fields;
            $self->tableFieldHash->{$tableName} = $fieldHash;
        }
        $self->currentFieldIndex(scalar @{$self->tableFields->{$tableName}});
    }
    sub endTable {
        my ($self) = @_;
        $self->currentTableName(undef);
    }
    sub addField {
        my ($self, $fieldName, $fieldType) = @_;
        my $tableName = $self->currentTableName;
        if (!$tableName) {
            return;
        }
        return if $self->excludes($tableName, $fieldName);
        my $index = $self->currentFieldIndex;
        my $field = {
                     name => $fieldName,
                     type => $fieldType,
                     index => $index,
                    };
        push(@{$self->tableFields->{$tableName}}, $field);
        $self->tableFieldHash->{$tableName}->{$fieldName} = $field;
        $self->currentFieldIndex($index + 1);
    }
    sub addReference {
        # print STDERR ("addReference\n");
        my ($self, %args) = @_;
        my $constraintName = $args{constraintName};
        my $foreignKey = $args{foreignKey};
        my $referencesTableName = $args{referencesTableName};
        my $referencesFieldName = $args{referencesFieldName};
        my $tableName = $args{tableName} // $self->currentTableName;
        if (!$tableName) {
            warn("not adding reference\n");
            return;
        }
        return if $self->excludes($tableName, $foreignKey);
        return if $self->excludes($referencesTableName, $referencesFieldName);
        $self->referenceHash->{$tableName} //= {};
        my $hash = {
                    tableName => $tableName,
                    constraintName => $constraintName,
                    foreignKey => $foreignKey,
                    referencesTableName => $referencesTableName,
                    referencesFieldName => $referencesFieldName
                   };
        push(@{$self->references}, $hash);
        $self->referenceHash->{$tableName}->{$foreignKey} = $hash;
    }
    sub getHeader {
	my $self = shift;
	my $header = <<END;
<?xml version="1.0" encoding="UTF-8"?>
<dia:diagram xmlns:dia="http://www.lysator.liu.se/~alla/dia/">
  <dia:diagramdata>
    <dia:attribute name="background">
      <dia:color val="#ffffff"/>
    </dia:attribute>
    <dia:attribute name="pagebreak">
      <dia:color val="#eeeeee"/>
    </dia:attribute>
    <dia:attribute name="paper">
      <dia:composite type="paper">
        <dia:attribute name="name">
          <dia:string>#A4#</dia:string>
        </dia:attribute>
        <dia:attribute name="tmargin">
          <dia:real val="2.8222"/>
        </dia:attribute>
        <dia:attribute name="bmargin">
          <dia:real val="2.8222"/>
        </dia:attribute>
        <dia:attribute name="lmargin">
          <dia:real val="2.8222"/>
        </dia:attribute>
        <dia:attribute name="rmargin">
          <dia:real val="2.8222"/>
        </dia:attribute>
        <dia:attribute name="is_portrait">
          <dia:boolean val="true"/>
        </dia:attribute>
        <dia:attribute name="scaling">
          <dia:real val="1"/>
        </dia:attribute>
        <dia:attribute name="fitto">
          <dia:boolean val="false"/>
        </dia:attribute>
      </dia:composite>
    </dia:attribute>
    <dia:attribute name="grid">
      <dia:composite type="grid">
        <dia:attribute name="width_x">
          <dia:real val="1"/>
        </dia:attribute>
        <dia:attribute name="width_y">
          <dia:real val="1"/>
        </dia:attribute>
        <dia:attribute name="visible_x">
          <dia:int val="1"/>
        </dia:attribute>
        <dia:attribute name="visible_y">
          <dia:int val="1"/>
        </dia:attribute>
        <dia:composite type="color"/>
      </dia:composite>
    </dia:attribute>
    <dia:attribute name="color">
      <dia:color val="#d8e5e5"/>
    </dia:attribute>
    <dia:attribute name="guides">
      <dia:composite type="guides">
        <dia:attribute name="hguides"/>
        <dia:attribute name="vguides"/>
      </dia:composite>
    </dia:attribute>
  </dia:diagramdata>
  <dia:layer name="Segundo Plano" visible="true" active="true">
END
	return $header;
    }
    sub getFooter {
	my $self = shift;
	my $footer = <<END;
  </dia:layer>
</dia:diagram>
END
	return $footer;
    }
    sub nextObjectId {
        my $self = shift;
        my $id = 'O' . $self->objectIdCounter;
        $self->objectIdCounter($self->objectIdCounter + 1);
        return $id;
    }
    sub getObjHeader {
	my $self = shift;
	my $tableName = shift;

        my $tableIndex = $self->tableNameHash->{$tableName}->{index};

        my ($x1, $y1, $x2, $y2, $x3, $y3) = $self->getPosition($tableIndex);

        my $width = $self->width;
        my $height = $self->height;

        my $id = $self->nextObjectId;
        $self->tableObjectId->{$tableName} = $id;

	my $header = <<END;
    <dia:object type="UML - Class" version="0" id="${id}">
      <dia:attribute name="obj_pos">
        <dia:point val="$x1,$y1"/>
      </dia:attribute>
      <dia:attribute name="obj_bb">
        <dia:rectangle val="$x2,$y2;$x3,$y3"/>
      </dia:attribute>
      <dia:attribute name="elem_corner">
        <dia:point val="$x1,$y1"/>
      </dia:attribute>
      <dia:attribute name="elem_width">
        <dia:real val="$width"/>
      </dia:attribute>
      <dia:attribute name="elem_height">
        <dia:real val="$height"/>
      </dia:attribute>
      <dia:attribute name="name">
        <dia:string>#${tableName}#</dia:string>
      </dia:attribute>
      <dia:attribute name="stereotype">
        <dia:string>##</dia:string>
      </dia:attribute>
      <dia:attribute name="comment">
        <dia:string>##</dia:string>
      </dia:attribute>
      <dia:attribute name="abstract">
        <dia:boolean val="false"/>
      </dia:attribute>
      <dia:attribute name="suppress_attributes">
        <dia:boolean val="false"/>
      </dia:attribute>
      <dia:attribute name="suppress_operations">
        <dia:boolean val="false"/>
      </dia:attribute>
      <dia:attribute name="visible_attributes">
        <dia:boolean val="true"/>
      </dia:attribute>
      <dia:attribute name="visible_operations">
        <dia:boolean val="true"/>
      </dia:attribute>
      <dia:attribute name="visible_comments">
        <dia:boolean val="false"/>
      </dia:attribute>
      <dia:attribute name="wrap_operations">
        <dia:boolean val="false"/>
      </dia:attribute>
      <dia:attribute name="wrap_after_char">
        <dia:int val="40"/>
      </dia:attribute>
      <dia:attribute name="comment_line_length">
        <dia:int val="40"/>
      </dia:attribute>
      <dia:attribute name="comment_tagging">
        <dia:boolean val="false"/>
      </dia:attribute>
      <dia:attribute name="line_width">
        <dia:real val="0.1"/>
      </dia:attribute>
      <dia:attribute name="line_color">
        <dia:color val="#000000"/>
      </dia:attribute>
      <dia:attribute name="fill_color">
        <dia:color val="#ffffff"/>
      </dia:attribute>
      <dia:attribute name="text_color">
        <dia:color val="#000000"/>
      </dia:attribute>
      <dia:attribute name="normal_font">
        <dia:font family="monospace" style="0" name="Courier"/>
      </dia:attribute>
      <dia:attribute name="abstract_font">
        <dia:font family="monospace" style="8" name="Courier-Oblique"/>
      </dia:attribute>
      <dia:attribute name="polymorphic_font">
        <dia:font family="monospace" style="8" name="Courier-Oblique"/>
      </dia:attribute>
      <dia:attribute name="classname_font">
        <dia:font family="sans" style="80" name="Helvetica-Bold"/>
      </dia:attribute>
      <dia:attribute name="abstract_classname_font">
        <dia:font family="sans" style="88" name="Helvetica-BoldOblique"/>
      </dia:attribute>
      <dia:attribute name="comment_font">
        <dia:font family="sans" style="8" name="Helvetica-Oblique"/>
      </dia:attribute>
      <dia:attribute name="normal_font_height">
        <dia:real val="0.8"/>
      </dia:attribute>
      <dia:attribute name="polymorphic_font_height">
        <dia:real val="0.8"/>
      </dia:attribute>
      <dia:attribute name="abstract_font_height">
        <dia:real val="0.8"/>
      </dia:attribute>
      <dia:attribute name="classname_font_height">
        <dia:real val="1"/>
      </dia:attribute>
      <dia:attribute name="abstract_classname_font_height">
        <dia:real val="1"/>
      </dia:attribute>
      <dia:attribute name="comment_font_height">
        <dia:real val="0.7"/>
      </dia:attribute>
      <dia:attribute name="attributes">
END
	$self->calcPosition();
	return $header;
    }
    sub getObjFooter {
	my $self = shift;
	my $footer = <<END;
      </dia:attribute>
      <dia:attribute name="operations"/>
      <dia:attribute name="template">
        <dia:boolean val="false"/>
      </dia:attribute>
      <dia:attribute name="templates"/>
    </dia:object>
END
	return $footer;
    }
    sub getAttrib {
	my $self = shift;
	my ($fieldName, $fieldType) = @_;
	my $attr = <<END;
        <dia:composite type="umlattribute">
          <dia:attribute name="name">
            <dia:string>#${fieldName}#</dia:string>
          </dia:attribute>
          <dia:attribute name="type">
            <dia:string>#${fieldType}#</dia:string>
          </dia:attribute>
          <dia:attribute name="value">
            <dia:string>##</dia:string>
          </dia:attribute>
          <dia:attribute name="comment">
            <dia:string>##</dia:string>
          </dia:attribute>
          <dia:attribute name="visibility">
            <dia:enum val="0"/>
          </dia:attribute>
          <dia:attribute name="abstract">
            <dia:boolean val="false"/>
          </dia:attribute>
          <dia:attribute name="class_scope">
            <dia:boolean val="false"/>
          </dia:attribute>
        </dia:composite>
END
	return $attr;
    }
    sub generateReferenceXML {
        my ($self, %args) = @_;

        my $tableName = $args{tableName};
        my $constraintName = $args{constraintName};
        my $foreignKey = $args{foreignKey};
        my $referencesTableName = $args{referencesTableName};
        my $referencesFieldName = $args{referencesFieldName};

        return if defined $tableName           && !$self->includeTableNames->{$tableName};
        return if defined $referencesTableName && !$self->includeTableNames->{$referencesTableName};

        return if $self->excludes($tableName, $foreignKey);
        return if $self->excludes($referencesTableName, $referencesFieldName);

        # printf STDERR ("%s\n", "wheeeee!");

        my $obj_pos = '13.435,6.9';
        my $obj_bb = '13.435,6.25;16,7.7';
        my $orth_point_0 = '13.435,6.9';
        my $orth_point_1 = '14.7175,6.9';
        my $orth_point_2 = '14.7175,7.7';
        my $orth_point_3 = '16,7.7';

        my $from_id   = $self->tableObjectId->{$tableName};
        my $to_id     = $self->tableObjectId->{$referencesTableName};
        my $from_conn = $self->tableFieldHash->{$tableName}->{$foreignKey}->{index} * 2 + 9;
        my $to_conn   = $self->tableFieldHash->{$referencesTableName}->{$referencesFieldName}->{index} * 2 + 8;

        # adoptions id -> adoption_statuses adoption_id = O0, 9 => O1, 10
        # adoptions recipient_id -> recipients id = O0, 17 => O23, 8

        my $id = $self->nextObjectId;

        my $xml = <<END;
    <dia:object type="Database - Reference" version="0" id="${id}">
      <dia:attribute name="obj_pos">
        <dia:point val="${obj_pos}"/>
      </dia:attribute>
      <dia:attribute name="obj_bb">
        <dia:rectangle val="${obj_bb}"/>
      </dia:attribute>
      <dia:attribute name="meta">
        <dia:composite type="dict"/>
      </dia:attribute>
      <dia:attribute name="orth_points">
        <dia:point val="${orth_point_0}"/>
        <dia:point val="${orth_point_1}"/>
        <dia:point val="${orth_point_2}"/>
        <dia:point val="${orth_point_3}"/>
      </dia:attribute>
      <dia:attribute name="orth_orient">
        <dia:enum val="0"/>
        <dia:enum val="1"/>
        <dia:enum val="0"/>
      </dia:attribute>
      <dia:attribute name="orth_autoroute">
        <dia:boolean val="true"/>
      </dia:attribute>
      <dia:attribute name="text_colour">
        <dia:color val="#000000"/>
      </dia:attribute>
      <dia:attribute name="line_colour">
        <dia:color val="#000000"/>
      </dia:attribute>
      <dia:attribute name="line_width">
        <dia:real val="0.1"/>
      </dia:attribute>
      <dia:attribute name="line_style">
        <dia:enum val="0"/>
        <dia:real val="1"/>
      </dia:attribute>
      <dia:attribute name="corner_radius">
        <dia:real val="0.5"/>
      </dia:attribute>
      <dia:attribute name="end_arrow">
        <dia:enum val="22"/>
      </dia:attribute>
      <dia:attribute name="end_arrow_length">
        <dia:real val="0.5"/>
      </dia:attribute>
      <dia:attribute name="end_arrow_width">
        <dia:real val="0.5"/>
      </dia:attribute>
      <dia:attribute name="start_point_desc">
        <dia:string>#n#</dia:string>
      </dia:attribute>
      <dia:attribute name="end_point_desc">
        <dia:string>#1#</dia:string>
      </dia:attribute>
      <dia:attribute name="normal_font">
        <dia:font family="monospace" style="0" name="Courier"/>
      </dia:attribute>
      <dia:attribute name="normal_font_height">
        <dia:real val="0.6"/>
      </dia:attribute>
      <dia:connections>
        <dia:connection handle="0" to="${from_id}" connection="${from_conn}"/>
        <dia:connection handle="1" to="${to_id}" connection="${to_conn}"/>
      </dia:connections>
    </dia:object>
END
        return $xml;
    }
    sub initPosition {
        my $self = shift;
        $self->left(1.0);
        $self->top(5.0);
        $self->x1($self->left);
        $self->y1($self->top);
        $self->x2($self->x1 - 0.05);
        $self->y2($self->y1 - 0.05);
        $self->width(12);
        $self->height(30);
        $self->x3($self->x2 + $self->width + 0.1);
        $self->y3($self->y2 + $self->height + 0.1);
        $self->xinc(15);
        $self->yinc(40);
    }
    sub calcPosition {
	my $self = shift;
        $self->x1($self->x1 + $self->xinc);
        $self->x2($self->x2 + $self->xinc);
        $self->x3($self->x3 + $self->xinc);
        if ($self->x1 > ($self->left + 10 * $self->xinc)) {
            $self->x1($self->left);
            $self->x2($self->x1 - 0.05);
            $self->x3($self->x2 + $self->width + 0.1);
            $self->y1($self->y1 + $self->yinc);
            $self->y2($self->y2 + $self->yinc);
            $self->y3($self->y3 + $self->yinc);
        }

        $self->columnNumber($self->columnNumber + 1);
        if ($self->columnNumber > $self->columnsPerRow) {
            $self->columnNumber($self->columnNumber - $self->columnsPerRow);
            $self->rowNumber($self->rowNumber + 1);
        }
    }
    use POSIX qw(floor);
    use Scalar::Util qw(looks_like_number);
    sub getRowColumnNumbers {
        my ($self, $tableIndex) = @_;
        my $rowNumber = floor($tableIndex / $self->columnsPerRow);
        my $columnNumber = $tableIndex % $self->columnsPerRow;
        return ($rowNumber, $columnNumber);
    }
    sub getPosition {
        # $o->getPosition(<table number>);
        # $o->getPosition(<row number>, <column number>);
        my ($self) = @_;

        my ($rowNumber, $columnNumber);
        if (scalar @_ == 2) {
            if (looks_like_number($_[1])) {
                ($rowNumber, $columnNumber) = $self->getRowColumnNumbers($_[1]);
            } else {
                die("getPosition: single argument doesn't look like a number\n");
            }
        } elsif (scalar @_ == 3) {
            if (looks_like_number($_[1]) && looks_like_number($_[2])) {
                ($rowNumber, $columnNumber) = ($_[1], $_[2]);
            } else {
                die("getPosition: both arguments don't look like numbers\n");
            }
        } else {
            die("getPosition: expects 1 or 2 arguments\n");
        }

        my $x1 = $self->left + $self->xinc * $columnNumber;
        my $y1 = $self->top + $self->yinc * $rowNumber;
        my $x2 = $x1 - 0.05;
        my $y2 = $y1 - 0.05;
        my $x3 = $x2 + $self->width + 0.1;
        my $y3 = $y2 + $self->height + 0.1;
        return ($x1, $y1, $x2, $y2, $x3, $y3);
    }
    sub generateXML {
        my ($self, @tableNames) = @_;
        if (!scalar @tableNames) {
            @tableNames = @{$self->tableNames};
        }
        my %tableNames = map { ($_ => 1) } @tableNames;
        $self->includeTableNames(\%tableNames);
        my $xml = '';
        $self->initPosition();
        $xml .= $self->getHeader();
        foreach my $tableName (@tableNames) {
            $xml .= $self->getObjHeader($tableName);
            foreach my $field (@{$self->tableFields->{$tableName}}) {
                my $fieldName = $field->{name};
                my $fieldType = $field->{type};
                $xml .= $self->getAttrib($fieldName, $fieldType);
            }
            $xml .= $self->getObjFooter();
        }
        foreach my $reference (@{$self->references}) {
            # print STDERR (Dumper($reference));
            my $refXml = $self->generateReferenceXML(%$reference);
            $xml .= $refXml if defined $refXml;
        }
        $xml .= $self->getFooter();
        return $xml;
    }
    sub excludes {
        my ($self, $table, $field) = @_;
        return grep { $_ eq $field } @{$self->excludeFields()};
    }
};

package Dia::Parse::MySQLDump {
    use Moo;
    INIT {
        has tableName => (is => 'rw');
        has generator => (is => 'rw');
    }
    sub parse {
        my ($self, $line) = @_;
        $line =~ s{\R\z}{};
        if ($line =~ m{^CREATE\s+TABLE\s+`(.*?)`\s+\(\s*$}) {
            my $tableName = $1;
            $self->tableName($tableName);
            $self->generator->startTable($tableName);
            return;
        }
        if (defined $self->tableName) {
            if (m{^\)\s*$}) {
                $self->generator->endTable();
                return;
            }
            if (m{^  `(.*?)`\s+(\S+)}) {
                my $fieldName = $1;
                my $fieldType = $2;
                $self->generator->addField($fieldName, $fieldType);
                return;
            }
            if (m{^\s+constraint\s*`(.*?)`\s*foreign\s+key\s\(`(.*?)`\)\s*references\s*`(.*?)`\s*\(`(.*?)`\)}i) {
                my $constraintName = $1;
                my $foreignKey = $2;
                my $referencesTableName = $3;
                my $referencesFieldName = $4;
                $self->generator->addReference(constraintName      => $constraintName,
                                               foreignKey          => $foreignKey,
                                               referencesTableName => $referencesTableName,
                                               referencesFieldName => $referencesFieldName);
                return;
            }
        }
    }
    sub eof {
        my ($self) = @_;
    }
};
